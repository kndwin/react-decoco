{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/knd/projects/website/decoco/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/home/knd/projects/website/decoco/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/knd/projects/website/decoco/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/home/knd/projects/website/decoco/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/knd/projects/website/decoco/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/knd/projects/website/decoco/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, cloneElement, Fragment } from 'react';\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value === null || isUndefined(value);\n};\n\nvar isArray = function isArray(value) {\n  return Array.isArray(value);\n};\n\nvar isObjectType = function isObjectType(value) {\n  return typeof value === 'object';\n};\n\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n};\n\nvar isHTMLElement = function isHTMLElement(value) {\n  return isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n};\n\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nvar VALUE = 'value';\nvar UNDEFINED = 'undefined';\nvar EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nvar INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nvar REGEX_IS_PLAIN_PROP = /^\\w*$/;\nvar REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nvar REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\nvar REGEX_ARRAY_FIELD_INDEX = /[\\d+]/g;\n\nfunction attachEventListeners(_ref) {\n  var ref = _ref.field.ref,\n      handleChange = _ref.handleChange,\n      isRadioOrCheckbox = _ref.isRadioOrCheckbox;\n\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isKey = function isKey(value) {\n  return !isArray(value) && (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n};\n\nvar stringToPath = function stringToPath(string) {\n  var result = [];\n  string.replace(REGEX_PROP_NAME, function (match, number, quote, string) {\n    result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = function transformToNestObject(data) {\n  return Object.entries(data).reduce(function (previous, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    if (!isKey(key)) {\n      set(previous, key, value);\n      return previous;\n    }\n\n    return Object.assign(Object.assign({}, previous), _defineProperty({}, key, value));\n  }, {});\n};\n\nvar get = function get(obj, path, defaultValue) {\n  var result = path.split(/[,[\\].]+?/).filter(Boolean).reduce(function (result, key) {\n    return isNullOrUndefined(result) ? result : result[key];\n  }, obj);\n  return isUndefined(result) || result === obj ? obj[path] || defaultValue : result;\n};\n\nvar focusErrorField = function focusErrorField(fields, fieldErrors) {\n  for (var key in fields) {\n    if (get(fieldErrors, key)) {\n      var field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = function removeAllEventListeners(ref, validateWithStateUpdate) {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar isRadioInput = function isRadioInput(element) {\n  return element.type === 'radio';\n};\n\nvar isCheckBoxInput = function isCheckBoxInput(element) {\n  return element.type === 'checkbox';\n};\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && !Object.keys(value).length;\n};\n\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\nfunction baseGet(object, path) {\n  var updatePath = isKey(path) ? [path] : castPath(path);\n  var length = path.length;\n  var index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return index == length ? object : undefined;\n}\n\nfunction baseSlice(array, start, end) {\n  var index = -1;\n  var length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end > length ? length : end;\n\n  if (end < 0) {\n    end += length;\n  }\n\n  length = start > end ? 0 : end - start;\n  var result = Array(length);\n\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n\n  return result;\n}\n\nfunction parent(object, path) {\n  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nfunction baseUnset(object, path) {\n  var updatePath = isKey(path) ? [path] : castPath(path);\n  var childObject = parent(object, updatePath);\n  var key = updatePath[updatePath.length - 1];\n  var result = !(childObject != null) || delete childObject[key];\n  var previousObjRef = undefined;\n\n  for (var k = 0; k < updatePath.slice(0, -1).length; k++) {\n    var index = -1;\n    var objectRef = undefined;\n    var currentPaths = updatePath.slice(0, -(k + 1));\n    var currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      var item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index) {\n        if (isObject(objectRef) && isEmptyObject(objectRef) || isArray(objectRef) && !objectRef.filter(function (data) {\n          return isObject(data) && !isEmptyObject(data);\n        }).length) {\n          previousObjRef ? delete previousObjRef[item] : delete object[item];\n        }\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return result;\n}\n\nfunction unset(object, paths) {\n  paths.forEach(function (path) {\n    baseUnset(object, path);\n  });\n  return object;\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\n  var ref = field.ref,\n      _field$ref = field.ref,\n      name = _field$ref.name,\n      type = _field$ref.type,\n      mutationWatcher = field.mutationWatcher;\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  var fieldValue = fields[name];\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\n    var options = fieldValue.options;\n\n    if (isArray(options) && options.length) {\n      options.filter(Boolean).forEach(function (_ref4, index) {\n        var ref = _ref4.ref,\n            mutationWatcher = _ref4.mutationWatcher;\n\n        if (ref && isDetached(ref) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, [\"[\".concat(index, \"]\")]);\n        }\n      });\n\n      if (options && !options.filter(Boolean).length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nvar defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = function getRadioValue(options) {\n  return isArray(options) ? options.filter(Boolean).reduce(function (previous, _ref5) {\n    var _ref5$ref = _ref5.ref,\n        checked = _ref5$ref.checked,\n        value = _ref5$ref.value;\n    return checked ? {\n      isValid: true,\n      value: value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\n\nvar getMultipleSelectValue = function getMultipleSelectValue(options) {\n  return _toConsumableArray(options).filter(function (_ref6) {\n    var selected = _ref6.selected;\n    return selected;\n  }).map(function (_ref7) {\n    var value = _ref7.value;\n    return value;\n  });\n};\n\nvar isFileInput = function isFileInput(element) {\n  return element.type === 'file';\n};\n\nvar isMultipleSelect = function isMultipleSelect(element) {\n  return element.type === 'select-multiple';\n};\n\nvar isEmptyString = function isEmptyString(value) {\n  return value === '';\n};\n\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = function getCheckboxValue(options) {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(function (_ref8) {\n        var checked = _ref8.ref.checked;\n        return checked;\n      }).map(function (_ref9) {\n        var value = _ref9.ref.value;\n        return value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    var _options$0$ref = options[0].ref,\n        checked = _options$0$ref.checked,\n        value = _options$0$ref.value,\n        attributes = _options$0$ref.attributes;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  var name = ref.name,\n      value = ref.value;\n  var field = fields[name];\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar isString = function isString(value) {\n  return typeof value === 'string';\n};\n\nvar getFieldsValues = function getFieldsValues(fields, search) {\n  var output = {};\n\n  var _loop = function _loop(name) {\n    if (isUndefined(search) || (isString(search) ? name.startsWith(search) : isArray(search) ? search.find(function (data) {\n      return name.startsWith(data);\n    }) : search && search.nest)) {\n      output[name] = getFieldValue(fields, fields[name].ref);\n    }\n  };\n\n  for (var name in fields) {\n    _loop(name);\n  }\n\n  return output;\n};\n\nvar compareObject = function compareObject() {\n  var objectA = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var objectB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var objectAData = Object.entries(objectA);\n  var objectBData = Object.keys(objectB);\n  return objectAData.length === objectBData.length && objectAData.reduce(function (previous, _ref10) {\n    var _ref11 = _slicedToArray(_ref10, 2),\n        key = _ref11[0],\n        value = _ref11[1];\n\n    return previous ? objectB[key] && objectB[key] === value : false;\n  }, true);\n};\n\nvar isSameError = function isSameError(error, _ref12) {\n  var type = _ref12.type,\n      types = _ref12.types,\n      message = _ref12.message;\n  return isObject(error) && error.type === type && error.message === message && compareObject(error.types, types);\n};\n\nfunction shouldUpdateWithError(_ref13) {\n  var errors = _ref13.errors,\n      name = _ref13.name,\n      error = _ref13.error,\n      validFields = _ref13.validFields,\n      fieldsWithValidation = _ref13.fieldsWithValidation;\n  var isFieldValid = isEmptyObject(error);\n  var isFormValid = isEmptyObject(errors);\n  var currentFieldError = get(error, name);\n  var existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\n\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  var isValueMessage = function isValueMessage(value) {\n    return isObject(value) && !isRegex(value);\n  };\n\n  return isValueMessage(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\n\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n\nvar isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\n\nvar isMessage = function isMessage(value) {\n  return isString(value) || isObject(value) && isValidElement(value);\n};\n\nfunction getValidateError(result, ref) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || isBoolean(result) && !result) {\n    return {\n      type: type,\n      message: isMessage(result) ? result : '',\n      ref: ref\n    };\n  }\n}\n\nvar appendErrors = function appendErrors(name, validateAllFieldCriteria, errors, type, message) {\n  if (validateAllFieldCriteria) {\n    var error = errors[name];\n    return Object.assign(Object.assign({}, error), {\n      types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), _defineProperty({}, type, message || true))\n    });\n  }\n\n  return {};\n};\n\nvar validateField = /*#__PURE__*/function () {\n  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fieldsRef, validateAllFieldCriteria, _ref14) {\n    var ref, _ref14$ref, type, value, name, options, required, maxLength, minLength, min, max, pattern, validate, _a, fields, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, appendErrorsCurry, getMinMaxMessage, _ref16, requiredValue, requiredMessage, exceedMax, exceedMin, _getValueAndMessage, maxValue, maxMessage, _getValueAndMessage2, minValue, minMessage, valueNumber, valueDate, _getValueAndMessage3, maxLengthValue, maxLengthMessage, _getValueAndMessage4, minLengthValue, minLengthMessage, inputLength, _exceedMax, _exceedMin, _getValueAndMessage5, patternValue, patternMessage, fieldValue, validateRef, result, validateError, validationResult, _i, _Object$entries, _Object$entries$_i, key, validateFunction, validateResult, _validateError;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ref = _ref14.ref, _ref14$ref = _ref14.ref, type = _ref14$ref.type, value = _ref14$ref.value, name = _ref14$ref.name, options = _ref14.options, required = _ref14.required, maxLength = _ref14.maxLength, minLength = _ref14.minLength, min = _ref14.min, max = _ref14.max, pattern = _ref14.pattern, validate = _ref14.validate;\n            fields = fieldsRef.current;\n            error = {};\n            isRadio = isRadioInput(ref);\n            isCheckBox = isCheckBoxInput(ref);\n            isRadioOrCheckbox = isRadio || isCheckBox;\n            isEmpty = isEmptyString(value);\n            appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n            getMinMaxMessage = function getMinMaxMessage(exceedMax, maxLengthMessage, minLengthMessage) {\n              var maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n              var minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n              var message = exceedMax ? maxLengthMessage : minLengthMessage;\n              error[name] = Object.assign({\n                type: exceedMax ? maxType : minType,\n                message: message,\n                ref: ref\n              }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n\n              if (!validateAllFieldCriteria) {\n                return error;\n              }\n            };\n\n            if (!(required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid))) {\n              _context.next = 15;\n              break;\n            }\n\n            _ref16 = isMessage(required) ? {\n              value: !!required,\n              message: required\n            } : getValueAndMessage(required), requiredValue = _ref16.value, requiredMessage = _ref16.message;\n\n            if (!requiredValue) {\n              _context.next = 15;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.required,\n              message: requiredMessage,\n              ref: isRadioOrCheckbox ? (_a = fields[name].options) === null || _a === void 0 ? void 0 : _a[0].ref : ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 15:\n            if (!(!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n              _context.next = 23;\n              break;\n            }\n\n            _getValueAndMessage = getValueAndMessage(max), maxValue = _getValueAndMessage.value, maxMessage = _getValueAndMessage.message;\n            _getValueAndMessage2 = getValueAndMessage(min), minValue = _getValueAndMessage2.value, minMessage = _getValueAndMessage2.message;\n\n            if (type === 'number' || !type && !isNaN(value)) {\n              valueNumber = ref.valueAsNumber || parseFloat(value);\n\n              if (!isNullOrUndefined(maxValue)) {\n                exceedMax = valueNumber > maxValue;\n              }\n\n              if (!isNullOrUndefined(minValue)) {\n                exceedMin = valueNumber < minValue;\n              }\n            } else {\n              valueDate = ref.valueAsDate || new Date(value);\n\n              if (isString(maxValue)) {\n                exceedMax = valueDate > new Date(maxValue);\n              }\n\n              if (isString(minValue)) {\n                exceedMin = valueDate < new Date(minValue);\n              }\n            }\n\n            if (!(exceedMax || exceedMin)) {\n              _context.next = 23;\n              break;\n            }\n\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 23;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 23:\n            if (!(isString(value) && !isEmpty && (maxLength || minLength))) {\n              _context.next = 33;\n              break;\n            }\n\n            _getValueAndMessage3 = getValueAndMessage(maxLength), maxLengthValue = _getValueAndMessage3.value, maxLengthMessage = _getValueAndMessage3.message;\n            _getValueAndMessage4 = getValueAndMessage(minLength), minLengthValue = _getValueAndMessage4.value, minLengthMessage = _getValueAndMessage4.message;\n            inputLength = value.toString().length;\n            _exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n            _exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n            if (!(_exceedMax || _exceedMin)) {\n              _context.next = 33;\n              break;\n            }\n\n            getMinMaxMessage(!!_exceedMax, maxLengthMessage, minLengthMessage);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 33;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 33:\n            if (!(pattern && !isEmpty)) {\n              _context.next = 39;\n              break;\n            }\n\n            _getValueAndMessage5 = getValueAndMessage(pattern), patternValue = _getValueAndMessage5.value, patternMessage = _getValueAndMessage5.message;\n\n            if (!(isRegex(patternValue) && !patternValue.test(value))) {\n              _context.next = 39;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.pattern,\n              message: patternMessage,\n              ref: ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 39;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 39:\n            if (!validate) {\n              _context.next = 72;\n              break;\n            }\n\n            fieldValue = getFieldValue(fields, ref);\n            validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n            if (!isFunction(validate)) {\n              _context.next = 53;\n              break;\n            }\n\n            _context.next = 45;\n            return validate(fieldValue);\n\n          case 45:\n            result = _context.sent;\n            validateError = getValidateError(result, validateRef);\n\n            if (!validateError) {\n              _context.next = 51;\n              break;\n            }\n\n            error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 51;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 51:\n            _context.next = 72;\n            break;\n\n          case 53:\n            if (!isObject(validate)) {\n              _context.next = 72;\n              break;\n            }\n\n            validationResult = {};\n            _i = 0, _Object$entries = Object.entries(validate);\n\n          case 56:\n            if (!(_i < _Object$entries.length)) {\n              _context.next = 68;\n              break;\n            }\n\n            _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], validateFunction = _Object$entries$_i[1];\n\n            if (!(!isEmptyObject(validationResult) && !validateAllFieldCriteria)) {\n              _context.next = 60;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 68);\n\n          case 60:\n            _context.next = 62;\n            return validateFunction(fieldValue);\n\n          case 62:\n            validateResult = _context.sent;\n            _validateError = getValidateError(validateResult, validateRef, key);\n\n            if (_validateError) {\n              validationResult = Object.assign(Object.assign({}, _validateError), appendErrorsCurry(key, _validateError.message));\n\n              if (validateAllFieldCriteria) {\n                error[name] = validationResult;\n              }\n            }\n\n          case 65:\n            _i++;\n            _context.next = 56;\n            break;\n\n          case 68:\n            if (isEmptyObject(validationResult)) {\n              _context.next = 72;\n              break;\n            }\n\n            error[name] = Object.assign({\n              ref: validateRef\n            }, validationResult);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 72;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 72:\n            return _context.abrupt(\"return\", error);\n\n          case 73:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateField(_x, _x2, _x3) {\n    return _ref15.apply(this, arguments);\n  };\n}();\n\nvar parseErrorSchema = function parseErrorSchema(error, validateAllFieldCriteria) {\n  return isArray(error.inner) ? error.inner.reduce(function (previous, _ref17) {\n    var path = _ref17.path,\n        message = _ref17.message,\n        type = _ref17.type;\n    return Object.assign(Object.assign({}, previous), previous[path] && validateAllFieldCriteria ? _defineProperty({}, path, appendErrors(path, validateAllFieldCriteria, previous, type, message)) : _defineProperty({}, path, previous[path] || Object.assign({\n      message: message,\n      type: type\n    }, validateAllFieldCriteria ? {\n      types: _defineProperty({}, type, message || true)\n    } : {})));\n  }, {}) : _defineProperty({}, error.path, {\n    message: error.message,\n    type: error.type\n  });\n};\n\nfunction validateWithSchema(_x4, _x5, _x6, _x7, _x8) {\n  return _validateWithSchema.apply(this, arguments);\n}\n\nfunction _validateWithSchema() {\n  _validateWithSchema = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!validationResolver) {\n              _context8.next = 2;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", validationResolver(data, context));\n\n          case 2:\n            _context8.prev = 2;\n            _context8.next = 5;\n            return validationSchema.validate(data, {\n              abortEarly: false,\n              context: context\n            });\n\n          case 5:\n            _context8.t0 = _context8.sent;\n            _context8.t1 = {};\n            return _context8.abrupt(\"return\", {\n              values: _context8.t0,\n              errors: _context8.t1\n            });\n\n          case 10:\n            _context8.prev = 10;\n            _context8.t2 = _context8[\"catch\"](2);\n            return _context8.abrupt(\"return\", {\n              values: {},\n              errors: transformToNestObject(parseErrorSchema(_context8.t2, validateAllFieldCriteria))\n            });\n\n          case 13:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[2, 10]]);\n  }));\n  return _validateWithSchema.apply(this, arguments);\n}\n\nvar isPrimitive = function isPrimitive(value) {\n  return isNullOrUndefined(value) || !isObjectType(value);\n};\n\nvar getPath = function getPath(path, values) {\n  var getInnerPath = function getInnerPath(value, key, isObject) {\n    var pathWithIndex = isObject ? \"\".concat(path, \".\").concat(key) : \"\".concat(path, \"[\").concat(key, \"]\");\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values) ? values.map(function (value, key) {\n    return getInnerPath(value, key);\n  }) : Object.entries(values).map(function (_ref21) {\n    var _ref22 = _slicedToArray(_ref21, 2),\n        key = _ref22[0],\n        value = _ref22[1];\n\n    return getInnerPath(value, key, true);\n  });\n};\n\nvar getPath$1 = function getPath$1(parentPath, value) {\n  return getPath(parentPath, value).flat(Infinity);\n};\n\nvar assignWatchFields = function assignWatchFields(fieldValues, fieldName, watchFields, combinedDefaultValues) {\n  var value;\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n    watchFields.add(fieldName);\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(function (name) {\n        return watchFields.add(name);\n      });\n    }\n  }\n\n  return isUndefined(value) ? isObject(combinedDefaultValues) ? get(combinedDefaultValues, fieldName) : combinedDefaultValues : value;\n};\n\nvar skipValidation = function skipValidation(_ref23) {\n  var isOnChange = _ref23.isOnChange,\n      hasError = _ref23.hasError,\n      isBlurEvent = _ref23.isBlurEvent,\n      isOnSubmit = _ref23.isOnSubmit,\n      isReValidateOnSubmit = _ref23.isReValidateOnSubmit,\n      isOnBlur = _ref23.isOnBlur,\n      isReValidateOnBlur = _ref23.isReValidateOnBlur,\n      isSubmitted = _ref23.isSubmitted;\n  return isOnChange && isBlurEvent || isOnSubmit && isReValidateOnSubmit || isOnSubmit && !isSubmitted || isOnBlur && !isBlurEvent && !hasError || isReValidateOnBlur && !isBlurEvent && hasError || isReValidateOnSubmit && isSubmitted;\n};\n\nvar getFieldArrayParentName = function getFieldArrayParentName(name) {\n  return name.substring(0, name.indexOf('['));\n};\n\nvar getFieldValueByName = function getFieldValueByName(fields, name) {\n  var results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\n  var isMatch = false;\n\n  if (!isArray(referenceArray) || !isArray(differenceArray) || referenceArray.length !== differenceArray.length) {\n    return true;\n  }\n\n  for (var i = 0; i < referenceArray.length; i++) {\n    if (isMatch) {\n      break;\n    }\n\n    var dataA = referenceArray[i];\n    var dataB = differenceArray[i];\n\n    if (isUndefined(dataB) || Object.keys(dataA).length !== Object.keys(dataB).length) {\n      isMatch = true;\n      break;\n    }\n\n    for (var key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        isMatch = true;\n        break;\n      }\n    }\n  }\n\n  return isMatch;\n}\n\nvar isMatchFieldArrayName = function isMatchFieldArrayName(name, searchName) {\n  return RegExp(\"^\".concat(searchName, \"[\\\\d+]\").replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\n};\n\nvar isNameInFieldArray = function isNameInFieldArray(names, name) {\n  return _toConsumableArray(names).reduce(function (prev, current) {\n    return isMatchFieldArrayName(name, current) ? true : prev;\n  }, false);\n};\n\nvar isFileListObject = function isFileListObject(data) {\n  return typeof FileList !== UNDEFINED && data instanceof FileList;\n};\n\nfunction onDomRemove(element, onDetachCallback) {\n  var observer = new MutationObserver(function () {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nvar modeChecker = function modeChecker(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange\n  };\n};\n\nvar isRadioOrCheckboxFunction = function isRadioOrCheckboxFunction(ref) {\n  return isRadioInput(ref) || isCheckBoxInput(ref);\n};\n\nfunction useForm() {\n  var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref24$mode = _ref24.mode,\n      mode = _ref24$mode === void 0 ? VALIDATION_MODE.onSubmit : _ref24$mode,\n      _ref24$reValidateMode = _ref24.reValidateMode,\n      reValidateMode = _ref24$reValidateMode === void 0 ? VALIDATION_MODE.onChange : _ref24$reValidateMode,\n      validationSchema = _ref24.validationSchema,\n      validationResolver = _ref24.validationResolver,\n      validationContext = _ref24.validationContext,\n      _ref24$defaultValues = _ref24.defaultValues,\n      defaultValues = _ref24$defaultValues === void 0 ? {} : _ref24$defaultValues,\n      _ref24$submitFocusErr = _ref24.submitFocusError,\n      submitFocusError = _ref24$submitFocusErr === void 0 ? true : _ref24$submitFocusErr,\n      validateCriteriaMode = _ref24.validateCriteriaMode;\n\n  var fieldsRef = useRef({});\n  var validateAllFieldCriteria = validateCriteriaMode === 'all';\n  var errorsRef = useRef({});\n  var touchedFieldsRef = useRef({});\n  var fieldArrayDefaultValues = useRef({});\n  var watchFieldsRef = useRef(new Set());\n  var dirtyFieldsRef = useRef(new Set());\n  var fieldsWithValidationRef = useRef(new Set());\n  var validFieldsRef = useRef(new Set());\n  var isValidRef = useRef(true);\n  var defaultRenderValuesRef = useRef({});\n  var defaultValuesRef = useRef(defaultValues);\n  var isUnMount = useRef(false);\n  var isWatchAllRef = useRef(false);\n  var isSubmittedRef = useRef(false);\n  var isDirtyRef = useRef(false);\n  var submitCountRef = useRef(0);\n  var isSubmittingRef = useRef(false);\n  var handleChangeRef = useRef();\n  var resetFieldArrayFunctionRef = useRef({});\n  var validationContextRef = useRef(validationContext);\n  var fieldArrayNamesRef = useRef(new Set());\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      render = _useState2[1];\n\n  var _useRef$current = useRef(modeChecker(mode)).current,\n      isOnBlur = _useRef$current.isOnBlur,\n      isOnSubmit = _useRef$current.isOnSubmit,\n      isOnChange = _useRef$current.isOnChange;\n  var isWindowUndefined = typeof window === UNDEFINED;\n  var shouldValidateCallback = !!(validationSchema || validationResolver);\n  var isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  var isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n  var readFormStateRef = useRef({\n    dirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  var _useRef$current2 = useRef(modeChecker(reValidateMode)).current,\n      isReValidateOnBlur = _useRef$current2.isOnBlur,\n      isReValidateOnSubmit = _useRef$current2.isOnSubmit;\n  validationContextRef.current = validationContext;\n  var reRender = useCallback(function () {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n  var shouldRenderBaseOnError = useCallback(function (name, error, shouldRender, skipReRender) {\n    var shouldReRender = shouldRender || shouldUpdateWithError({\n      errors: errorsRef.current,\n      error: error,\n      name: name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || shouldValidateCallback) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || get(errorsRef.current, name);\n      }\n\n      errorsRef.current = unset(errorsRef.current, [name]);\n    } else {\n      validFieldsRef.current.delete(name);\n      shouldReRender = shouldReRender || !get(errorsRef.current, name);\n      set(errorsRef.current, name, error[name]);\n    }\n\n    if (shouldReRender && !skipReRender) {\n      reRender();\n      return true;\n    }\n  }, [reRender, shouldValidateCallback]);\n  var setFieldValue = useCallback(function (field, rawValue) {\n    var ref = field.ref;\n    var options = field.options;\n    var type = ref.type;\n    var value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(ref) && options) {\n      options.forEach(function (_ref25) {\n        var radioRef = _ref25.ref;\n        return radioRef.checked = radioRef.value === value;\n      });\n    } else if (isFileInput(ref)) {\n      if (isFileListObject(value)) {\n        ref.files = value;\n      } else {\n        ref.value = value;\n      }\n    } else if (isMultipleSelect(ref)) {\n      _toConsumableArray(ref.options).forEach(function (selectRef) {\n        return selectRef.selected = value.includes(selectRef.value);\n      });\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(function (_ref26) {\n        var checkboxRef = _ref26.ref;\n        return checkboxRef.checked = value.includes(checkboxRef.value);\n      }) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n\n    return !!type;\n  }, [isWeb]);\n\n  var setDirty = function setDirty(name) {\n    if (!fieldsRef.current[name] || !readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields) {\n      return false;\n    }\n\n    var isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    var previousDirtyFieldsLength = dirtyFieldsRef.current.size;\n    var isDirty = defaultRenderValuesRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n\n    if (isFieldArray) {\n      var fieldArrayName = getFieldArrayParentName(name);\n      isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\n    }\n\n    var isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !== isDirty;\n\n    if (isDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\n    return readFormStateRef.current.dirty ? isDirtyChanged : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\n  };\n\n  var setDirtyAndTouchedFields = useCallback(function (fieldName) {\n    if (setDirty(fieldName) || !get(touchedFieldsRef.current, fieldName) && readFormStateRef.current.touched) {\n      return !!set(touchedFieldsRef.current, fieldName, true);\n    }\n  }, []);\n  var setInternalValueBatch = useCallback(function (name, value, parentFieldName) {\n    var isValueArray = isArray(value);\n\n    for (var key in value) {\n      var fieldName = \"\".concat(parentFieldName || name).concat(isValueArray ? \"[\".concat(key, \"]\") : \".\".concat(key));\n\n      if (isObject(value[key])) {\n        setInternalValueBatch(name, value[key], fieldName);\n      }\n\n      var field = fieldsRef.current[fieldName];\n\n      if (field) {\n        setFieldValue(field, value[key]);\n        setDirtyAndTouchedFields(fieldName);\n      }\n    }\n  }, [setFieldValue, setDirtyAndTouchedFields]);\n  var setInternalValue = useCallback(function (name, value) {\n    var field = fieldsRef.current[name];\n\n    if (field) {\n      setFieldValue(field, value);\n      var output = setDirtyAndTouchedFields(name);\n\n      if (isBoolean(output)) {\n        return output;\n      }\n    } else if (!isPrimitive(value)) {\n      setInternalValueBatch(name, value);\n    }\n  }, [setDirtyAndTouchedFields, setFieldValue, setInternalValueBatch]);\n  var executeValidation = useCallback( /*#__PURE__*/function () {\n    var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name, skipReRender) {\n      var field, error;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              field = fieldsRef.current[name];\n\n              if (field) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", false);\n\n            case 3:\n              _context2.next = 5;\n              return validateField(fieldsRef, validateAllFieldCriteria, field);\n\n            case 5:\n              error = _context2.sent;\n              shouldRenderBaseOnError(name, error, false, skipReRender);\n              return _context2.abrupt(\"return\", isEmptyObject(error));\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x9, _x10) {\n      return _ref27.apply(this, arguments);\n    };\n  }(), [shouldRenderBaseOnError, validateAllFieldCriteria]);\n  var executeSchemaValidation = useCallback( /*#__PURE__*/function () {\n    var _ref28 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n      var _yield$validateWithSc, errors, previousFormIsValid;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\n\n            case 2:\n              _yield$validateWithSc = _context3.sent;\n              errors = _yield$validateWithSc.errors;\n              previousFormIsValid = isValidRef.current;\n              isValidRef.current = isEmptyObject(errors);\n\n              if (isArray(payload)) {\n                payload.forEach(function (name) {\n                  var error = get(errors, name);\n\n                  if (error) {\n                    set(errorsRef.current, name, error);\n                  } else {\n                    unset(errorsRef.current, [name]);\n                  }\n                });\n                reRender();\n              } else {\n                shouldRenderBaseOnError(payload, get(errors, payload) ? _defineProperty({}, payload, get(errors, payload)) : {}, previousFormIsValid !== isValidRef.current);\n              }\n\n              return _context3.abrupt(\"return\", isEmptyObject(errorsRef.current));\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x11) {\n      return _ref28.apply(this, arguments);\n    };\n  }(), [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, validationResolver, validationSchema]);\n  var triggerValidation = useCallback( /*#__PURE__*/function () {\n    var _ref30 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(payload) {\n      var fields, result;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              fields = payload || Object.keys(fieldsRef.current);\n\n              if (!shouldValidateCallback) {\n                _context5.next = 3;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", executeSchemaValidation(fields));\n\n            case 3:\n              if (!isArray(fields)) {\n                _context5.next = 9;\n                break;\n              }\n\n              _context5.next = 6;\n              return Promise.all(fields.map( /*#__PURE__*/function () {\n                var _ref31 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return executeValidation(data, true);\n\n                        case 2:\n                          return _context4.abrupt(\"return\", _context4.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                return function (_x13) {\n                  return _ref31.apply(this, arguments);\n                };\n              }()));\n\n            case 6:\n              result = _context5.sent;\n              reRender();\n              return _context5.abrupt(\"return\", result.every(Boolean));\n\n            case 9:\n              _context5.next = 11;\n              return executeValidation(fields);\n\n            case 11:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x12) {\n      return _ref30.apply(this, arguments);\n    };\n  }(), [executeSchemaValidation, executeValidation, reRender, shouldValidateCallback]);\n\n  var isFieldWatched = function isFieldWatched(name) {\n    return isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n  };\n\n  function setValue(names, valueOrShouldValidate, shouldValidate) {\n    var shouldRender = false;\n    var isMultiple = isArray(names);\n    (isMultiple ? names : [names]).forEach(function (name) {\n      var isStringFieldName = isString(name);\n      shouldRender = setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName ? valueOrShouldValidate : Object.values(name)[0]) || isMultiple ? true : isFieldWatched(name);\n    });\n\n    if (shouldRender || isMultiple) {\n      reRender();\n    }\n\n    if (shouldValidate || isMultiple && valueOrShouldValidate) {\n      triggerValidation(isMultiple ? undefined : names);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : /*#__PURE__*/function () {\n    var _ref33 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref32) {\n      var type, target, name, fields, errors, field, currentError, error, isBlurEvent, shouldSkipValidation, shouldUpdateDirty, shouldUpdateState, _yield$validateWithSc2, _errors, previousFormIsValid;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              type = _ref32.type, target = _ref32.target;\n              name = target ? target.name : '';\n              fields = fieldsRef.current;\n              errors = errorsRef.current;\n              field = fields[name];\n              currentError = get(errors, name);\n\n              if (field) {\n                _context6.next = 8;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 8:\n              isBlurEvent = type === EVENTS.BLUR;\n              shouldSkipValidation = skipValidation({\n                hasError: !!currentError,\n                isOnChange: isOnChange,\n                isBlurEvent: isBlurEvent,\n                isOnSubmit: isOnSubmit,\n                isReValidateOnSubmit: isReValidateOnSubmit,\n                isOnBlur: isOnBlur,\n                isReValidateOnBlur: isReValidateOnBlur,\n                isSubmitted: isSubmittedRef.current\n              });\n              shouldUpdateDirty = setDirty(name);\n              shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;\n\n              if (isBlurEvent && !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n                set(touchedFieldsRef.current, name, true);\n                shouldUpdateState = true;\n              }\n\n              if (!shouldSkipValidation) {\n                _context6.next = 15;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", shouldUpdateState && reRender());\n\n            case 15:\n              if (!shouldValidateCallback) {\n                _context6.next = 26;\n                break;\n              }\n\n              _context6.next = 18;\n              return validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\n\n            case 18:\n              _yield$validateWithSc2 = _context6.sent;\n              _errors = _yield$validateWithSc2.errors;\n              previousFormIsValid = isValidRef.current;\n              isValidRef.current = isEmptyObject(_errors);\n              error = get(_errors, name) ? _defineProperty({}, name, get(_errors, name)) : {};\n\n              if (previousFormIsValid !== isValidRef.current) {\n                shouldUpdateState = true;\n              }\n\n              _context6.next = 29;\n              break;\n\n            case 26:\n              _context6.next = 28;\n              return validateField(fieldsRef, validateAllFieldCriteria, field);\n\n            case 28:\n              error = _context6.sent;\n\n            case 29:\n              if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\n                reRender();\n              }\n\n            case 30:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x14) {\n      return _ref33.apply(this, arguments);\n    };\n  }();\n  var validateSchemaIsValid = useCallback(function () {\n    var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var fieldValues = isEmptyObject(defaultValuesRef.current) ? getFieldsValues(fieldsRef.current) : defaultValuesRef.current;\n    validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(function (_ref35) {\n      var errors = _ref35.errors;\n      var previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [reRender, validateAllFieldCriteria, validationResolver]);\n  var removeFieldEventListener = useCallback(function (field, forceDelete) {\n    if (!isUndefined(handleChangeRef.current) && field) {\n      findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\n    }\n  }, []);\n  var removeFieldEventListenerAndRef = useCallback(function (field, forceDelete) {\n    if (!field || field && isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) && !forceDelete) {\n      return;\n    }\n\n    removeFieldEventListener(field, forceDelete);\n    var name = field.ref.name;\n    errorsRef.current = unset(errorsRef.current, [name]);\n    touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\n    defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [name]);\n    [dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(function (data) {\n      return data.current.delete(name);\n    });\n\n    if (readFormStateRef.current.isValid || readFormStateRef.current.touched) {\n      reRender();\n\n      if (shouldValidateCallback) {\n        validateSchemaIsValid();\n      }\n    }\n  }, [reRender, shouldValidateCallback, validateSchemaIsValid, removeFieldEventListener]);\n\n  function clearError(name) {\n    if (isUndefined(name)) {\n      errorsRef.current = {};\n    } else {\n      unset(errorsRef.current, isArray(name) ? name : [name]);\n    }\n\n    reRender();\n  }\n\n  var setInternalError = function setInternalError(_ref36) {\n    var name = _ref36.name,\n        type = _ref36.type,\n        types = _ref36.types,\n        message = _ref36.message,\n        preventRender = _ref36.preventRender;\n    var field = fieldsRef.current[name];\n\n    if (!isSameError(errorsRef.current[name], {\n      type: type,\n      message: message,\n      types: types\n    })) {\n      set(errorsRef.current, name, {\n        type: type,\n        types: types,\n        message: message,\n        ref: field ? field.ref : {},\n        isManual: true\n      });\n\n      if (!preventRender) {\n        reRender();\n      }\n    }\n  };\n\n  function setError(name) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var message = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (isString(name)) {\n      setInternalError(Object.assign({\n        name: name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type: type,\n        message: message\n      }));\n    } else if (isArray(name)) {\n      name.forEach(function (error) {\n        return setInternalError(Object.assign(Object.assign({}, error), {\n          preventRender: true\n        }));\n      });\n      reRender();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    var combinedDefaultValues = isUndefined(defaultValue) ? isUndefined(defaultValuesRef.current) ? {} : defaultValuesRef.current : defaultValue;\n    var fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\n    var watchFields = watchFieldsRef.current;\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce(function (previous, name) {\n        return Object.assign(Object.assign({}, previous), _defineProperty({}, name, assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues)));\n      }, {});\n    }\n\n    isWatchAllRef.current = true;\n    var result = !isEmptyObject(fieldValues) && fieldValues || combinedDefaultValues;\n    return fieldNames && fieldNames.nest ? transformToNestObject(result) : result;\n  }\n\n  function unregister(names) {\n    if (!isEmptyObject(fieldsRef.current)) {\n      (isArray(names) ? names : [names]).forEach(function (fieldName) {\n        return removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n      });\n    }\n  }\n\n  function registerFieldsRef(ref) {\n    var validateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    var name = ref.name,\n        type = ref.type,\n        value = ref.value;\n    var fieldAttributes = Object.assign({\n      ref: ref\n    }, validateOptions);\n    var fields = fieldsRef.current;\n    var isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    var currentField = fields[name];\n    var isEmptyDefaultValue = true;\n    var isFieldArray = false;\n    var defaultValue;\n\n    if (isRadioOrCheckbox ? currentField && isArray(currentField.options) && currentField.options.filter(Boolean).find(function (_ref37) {\n      var ref = _ref37.ref;\n      return value === ref.value;\n    }) : currentField) {\n      fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\n      return;\n    }\n\n    if (type) {\n      var mutationWatcher = onDomRemove(ref, function () {\n        return removeFieldEventListenerAndRef(fieldAttributes);\n      });\n      currentField = isRadioOrCheckbox ? Object.assign({\n        options: [].concat(_toConsumableArray(currentField && currentField.options || []), [{\n          ref: ref,\n          mutationWatcher: mutationWatcher\n        }]),\n        ref: {\n          type: type,\n          name: name\n        }\n      }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), {\n        mutationWatcher: mutationWatcher\n      });\n    } else {\n      currentField = fieldAttributes;\n    }\n\n    fields[name] = currentField;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      defaultValue = get(defaultValuesRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(currentField, defaultValue);\n      }\n    }\n\n    if (shouldValidateCallback && !isFieldArray && readFormStateRef.current.isValid) {\n      validateSchemaIsValid();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, currentField).then(function (error) {\n          var previousFormIsValid = isValidRef.current;\n\n          if (isEmptyObject(error)) {\n            validFieldsRef.current.add(name);\n          } else {\n            isValidRef.current = false;\n          }\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultRenderValuesRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      defaultRenderValuesRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, currentField.ref) : defaultValue;\n    }\n\n    if (!type) {\n      return;\n    }\n\n    var fieldToAttachListener = isRadioOrCheckbox && currentField.options ? currentField.options[currentField.options.length - 1] : currentField;\n    attachEventListeners({\n      field: fieldToAttachListener,\n      isRadioOrCheckbox: isRadioOrCheckbox,\n      handleChange: handleChangeRef.current\n    });\n  }\n\n  function register(refOrValidationOptions, validationOptions) {\n    if (isWindowUndefined) {\n      return;\n    }\n\n    if (isString(refOrValidationOptions)) {\n      registerFieldsRef({\n        name: refOrValidationOptions\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n      registerFieldsRef(refOrValidationOptions, validationOptions);\n      return;\n    }\n\n    return function (ref) {\n      return ref && registerFieldsRef(ref, refOrValidationOptions);\n    };\n  }\n\n  var handleSubmit = useCallback(function (callback) {\n    return /*#__PURE__*/function () {\n      var _ref38 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(e) {\n        var fieldErrors, fieldValues, fields, _yield$validateWithSc3, errors, values, _i2, _Object$values, field, _ref39, _name, fieldError;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (e) {\n                  e.preventDefault();\n                  e.persist();\n                }\n\n                fieldErrors = {};\n                fieldValues = {};\n                fields = fieldsRef.current;\n\n                if (readFormStateRef.current.isSubmitting) {\n                  isSubmittingRef.current = true;\n                  reRender();\n                }\n\n                _context7.prev = 5;\n\n                if (!shouldValidateCallback) {\n                  _context7.next = 18;\n                  break;\n                }\n\n                fieldValues = getFieldsValues(fields);\n                _context7.next = 10;\n                return validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\n\n              case 10:\n                _yield$validateWithSc3 = _context7.sent;\n                errors = _yield$validateWithSc3.errors;\n                values = _yield$validateWithSc3.values;\n                errorsRef.current = errors;\n                fieldErrors = errors;\n                fieldValues = values;\n                _context7.next = 30;\n                break;\n\n              case 18:\n                _i2 = 0, _Object$values = Object.values(fields);\n\n              case 19:\n                if (!(_i2 < _Object$values.length)) {\n                  _context7.next = 30;\n                  break;\n                }\n\n                field = _Object$values[_i2];\n\n                if (!field) {\n                  _context7.next = 27;\n                  break;\n                }\n\n                _ref39 = field.ref, _name = field.ref.name;\n                _context7.next = 25;\n                return validateField(fieldsRef, validateAllFieldCriteria, field);\n\n              case 25:\n                fieldError = _context7.sent;\n\n                if (fieldError[_name]) {\n                  set(fieldErrors, _name, fieldError[_name]);\n                  validFieldsRef.current.delete(_name);\n                } else {\n                  if (fieldsWithValidationRef.current.has(_name)) {\n                    validFieldsRef.current.add(_name);\n                  }\n\n                  fieldValues[_name] = getFieldValue(fields, _ref39);\n                }\n\n              case 27:\n                _i2++;\n                _context7.next = 19;\n                break;\n\n              case 30:\n                if (!isEmptyObject(fieldErrors)) {\n                  _context7.next = 36;\n                  break;\n                }\n\n                errorsRef.current = {};\n                _context7.next = 34;\n                return callback(transformToNestObject(fieldValues), e);\n\n              case 34:\n                _context7.next = 38;\n                break;\n\n              case 36:\n                if (submitFocusError && isWeb) {\n                  focusErrorField(fields, fieldErrors);\n                }\n\n                errorsRef.current = fieldErrors;\n\n              case 38:\n                _context7.prev = 38;\n                isSubmittedRef.current = true;\n                isSubmittingRef.current = false;\n                submitCountRef.current = submitCountRef.current + 1;\n                reRender();\n                return _context7.finish(38);\n\n              case 44:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[5,, 38, 44]]);\n      }));\n\n      return function (_x15) {\n        return _ref38.apply(this, arguments);\n      };\n    }();\n  }, [isWeb, reRender, shouldValidateCallback, submitFocusError, validateAllFieldCriteria, validationResolver, validationSchema]);\n\n  var resetRefs = function resetRefs(_ref40) {\n    var errors = _ref40.errors,\n        dirty = _ref40.dirty,\n        isSubmitted = _ref40.isSubmitted,\n        touched = _ref40.touched,\n        isValid = _ref40.isValid,\n        submitCount = _ref40.submitCount;\n    fieldsRef.current = {};\n\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!dirty) {\n      dirtyFieldsRef.current = new Set();\n      isDirtyRef.current = false;\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultRenderValuesRef.current = {};\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  var reset = function reset(values) {\n    var omitResetState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (isWeb) {\n      for (var _i3 = 0, _Object$values2 = Object.values(fieldsRef.current); _i3 < _Object$values2.length; _i3++) {\n        var value = _Object$values2[_i3];\n\n        if (value) {\n          var _ref41 = value.ref,\n              options = value.options;\n          var inputRef = isRadioOrCheckboxFunction(_ref41) && isArray(options) ? options[0].ref : _ref41;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(function (resetFieldArray) {\n      return isFunction(resetFieldArray) && resetFieldArray();\n    });\n    resetRefs(omitResetState);\n    reRender();\n  };\n\n  var getValues = function getValues(payload) {\n    var fieldValues = getFieldsValues(fieldsRef.current);\n    var outputValues = isEmptyObject(fieldValues) ? defaultValuesRef.current : fieldValues;\n    return payload && payload.nest ? transformToNestObject(outputValues) : outputValues;\n  };\n\n  useEffect(function () {\n    return function () {\n      isUnMount.current = true;\n      fieldsRef.current && process.env.NODE_ENV === 'production' && Object.values(fieldsRef.current).forEach(function (field) {\n        return removeFieldEventListenerAndRef(field, true);\n      });\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!shouldValidateCallback) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  var formState = {\n    dirty: isDirtyRef.current,\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isValidRef.current\n  };\n  var commonProps = {\n    triggerValidation: triggerValidation,\n    setValue: useCallback(setValue, [reRender, setInternalValue, triggerValidation]),\n    register: useCallback(register, [defaultValuesRef.current, defaultRenderValuesRef.current]),\n    unregister: useCallback(unregister, []),\n    getValues: useCallback(getValues, []),\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: function get(obj, prop) {\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return {};\n      }\n    }) : formState\n  };\n  var control = Object.assign(Object.assign(Object.assign({\n    removeFieldEventListener: removeFieldEventListener,\n    reRender: reRender\n  }, shouldValidateCallback ? {\n    validateSchemaIsValid: validateSchemaIsValid\n  } : {}), {\n    mode: {\n      isOnBlur: isOnBlur,\n      isOnSubmit: isOnSubmit,\n      isOnChange: isOnChange\n    },\n    reValidateMode: {\n      isReValidateOnBlur: isReValidateOnBlur,\n      isReValidateOnSubmit: isReValidateOnSubmit\n    },\n    errorsRef: errorsRef,\n    touchedFieldsRef: touchedFieldsRef,\n    fieldsRef: fieldsRef,\n    isWatchAllRef: isWatchAllRef,\n    watchFieldsRef: watchFieldsRef,\n    resetFieldArrayFunctionRef: resetFieldArrayFunctionRef,\n    fieldArrayDefaultValues: fieldArrayDefaultValues,\n    validFieldsRef: validFieldsRef,\n    dirtyFieldsRef: dirtyFieldsRef,\n    fieldsWithValidationRef: fieldsWithValidationRef,\n    fieldArrayNamesRef: fieldArrayNamesRef,\n    isDirtyRef: isDirtyRef,\n    readFormStateRef: readFormStateRef,\n    defaultValuesRef: defaultValuesRef\n  }), commonProps);\n  return Object.assign({\n    watch: watch,\n    control: control,\n    handleSubmit: handleSubmit,\n    reset: useCallback(reset, []),\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    errors: errorsRef.current\n  }, commonProps);\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(_a) {\n  var children = _a.children,\n      formState = _a.formState,\n      errors = _a.errors,\n      restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\n\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restMethods), {\n      formState: formState,\n      errors: errors\n    })\n  }, children);\n}\n\nvar generateId = function generateId() {\n  var d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar appendId = function appendId(value, keyName) {\n  return Object.assign(_defineProperty({}, keyName, generateId()), isObject(value) ? value : {\n    value: value\n  });\n};\n\nvar mapIds = function mapIds(data, keyName) {\n  return (isArray(data) ? data : []).map(function (value) {\n    return appendId(value, keyName);\n  });\n};\n\nvar getSortRemovedItems = function getSortRemovedItems(indexes, removeIndexes) {\n  var updatedIndexes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var notFoundIndexes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n\n  var _iterator = _createForOfIteratorHelper(removeIndexes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var removeIndex = _step.value;\n\n      if (indexes.indexOf(removeIndex) < 0) {\n        notFoundIndexes.push(removeIndex);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(indexes.sort()),\n      _step2;\n\n  try {\n    var _loop2 = function _loop2() {\n      var index = _step2.value;\n\n      if (removeIndexes.indexOf(index) > -1) {\n        updatedIndexes.push(-1);\n        count++;\n      } else {\n        updatedIndexes.push(index - count - (notFoundIndexes.length ? notFoundIndexes.map(function (notFoundIndex) {\n          return notFoundIndex < index;\n        }).filter(Boolean).length : 0));\n      }\n    };\n\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      _loop2();\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return updatedIndexes;\n};\n\nvar removeAt = function removeAt(data, index) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(data.slice(index + 1)));\n};\n\nfunction removeAtIndexes(data, index) {\n  var k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return data.filter(Boolean);\n}\n\nvar removeArrayAt = function removeArrayAt(data, index) {\n  return isUndefined(index) ? [] : isArray(index) ? removeAtIndexes(data, index) : removeAt(data, index);\n};\n\nvar moveArrayAt = function moveArrayAt(data, from, to) {\n  return isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n};\n\nvar swapArrayAt = function swapArrayAt(data, indexA, indexB) {\n  var temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n\nfunction prepend(data, value) {\n  return [].concat(_toConsumableArray(isArray(value) ? value : [value || null]), _toConsumableArray(data));\n}\n\nfunction insert(data, index, value) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(isArray(value) ? value : [value || null]), _toConsumableArray(data.slice(index)));\n}\n\nvar fillEmptyArray = function fillEmptyArray(value) {\n  return isArray(value) ? Array(value.length).fill(null) : null;\n};\n\nvar useFieldArray = function useFieldArray(_ref42) {\n  var control = _ref42.control,\n      name = _ref42.name,\n      _ref42$keyName = _ref42.keyName,\n      keyName = _ref42$keyName === void 0 ? 'id' : _ref42$keyName;\n  var methods = useFormContext();\n\n  var _ref43 = control || methods.control,\n      isWatchAllRef = _ref43.isWatchAllRef,\n      resetFieldArrayFunctionRef = _ref43.resetFieldArrayFunctionRef,\n      fieldArrayNamesRef = _ref43.fieldArrayNamesRef,\n      reRender = _ref43.reRender,\n      fieldsRef = _ref43.fieldsRef,\n      getValues = _ref43.getValues,\n      defaultValuesRef = _ref43.defaultValuesRef,\n      removeFieldEventListener = _ref43.removeFieldEventListener,\n      errorsRef = _ref43.errorsRef,\n      dirtyFieldsRef = _ref43.dirtyFieldsRef,\n      isDirtyRef = _ref43.isDirtyRef,\n      touchedFieldsRef = _ref43.touchedFieldsRef,\n      readFormStateRef = _ref43.readFormStateRef,\n      watchFieldsRef = _ref43.watchFieldsRef,\n      validFieldsRef = _ref43.validFieldsRef,\n      fieldsWithValidationRef = _ref43.fieldsWithValidationRef,\n      fieldArrayDefaultValues = _ref43.fieldArrayDefaultValues,\n      validateSchemaIsValid = _ref43.validateSchemaIsValid;\n\n  var getDefaultValues = function getDefaultValues() {\n    return _toConsumableArray(get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)] ? fieldArrayDefaultValues.current : defaultValuesRef.current, name, []));\n  };\n\n  var memoizedDefaultValues = useRef(getDefaultValues());\n\n  var _useState3 = useState(mapIds(memoizedDefaultValues.current, keyName)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fields = _useState4[0],\n      setField = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isDeleted = _useState6[0],\n      setIsDeleted = _useState6[1];\n\n  var allFields = useRef(fields);\n  var isNameKey = isKey(name);\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  var appendValueWithKey = function appendValueWithKey(values) {\n    return values.map(function (value) {\n      return appendId(value, keyName);\n    });\n  };\n\n  var setFieldAndValidState = function setFieldAndValidState(fieldsValues) {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid(_defineProperty({}, name, fieldsValues));\n    }\n  };\n\n  var modifyDirtyFields = function modifyDirtyFields() {\n    var _ref44 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        shouldRender = _ref44.shouldRender,\n        isRemove = _ref44.isRemove,\n        isPrePend = _ref44.isPrePend,\n        index = _ref44.index,\n        _ref44$value = _ref44.value,\n        value = _ref44$value === void 0 ? {} : _ref44$value;\n\n    var render = shouldRender;\n    var values = isArray(value) ? value : [value];\n\n    if (readFormStateRef.current.dirty) {\n      var dirtyFieldIndexesAndValues = {};\n\n      if (isPrePend || isRemove) {\n        var _iterator3 = _createForOfIteratorHelper(_toConsumableArray(dirtyFieldsRef.current).sort()),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var dirtyField = _step3.value;\n\n            if (isMatchFieldArrayName(dirtyField, name)) {\n              var matchedIndexes = dirtyField.match(REGEX_ARRAY_FIELD_INDEX);\n\n              if (matchedIndexes) {\n                var matchIndex = +matchedIndexes[matchedIndexes.length - 1];\n\n                if (dirtyFieldIndexesAndValues[matchIndex]) {\n                  dirtyFieldIndexesAndValues[matchIndex].push(dirtyField);\n                } else {\n                  dirtyFieldIndexesAndValues[matchIndex] = [dirtyField];\n                }\n              }\n\n              dirtyFieldsRef.current.delete(dirtyField);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      if (!isUndefined(index) || isPrePend) {\n        var updatedDirtyFieldIndexes = isUndefined(index) ? [] : getSortRemovedItems(Object.keys(dirtyFieldIndexesAndValues).map(function (i) {\n          return +i;\n        }), isArray(index) ? index : [index]);\n        Object.values(dirtyFieldIndexesAndValues).forEach(function (values, index) {\n          var updateIndex = isPrePend ? 0 : updatedDirtyFieldIndexes[index];\n\n          if (updateIndex > -1) {\n            var _iterator4 = _createForOfIteratorHelper(values),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var _value = _step4.value;\n\n                var _matchedIndexes = _value.match(REGEX_ARRAY_FIELD_INDEX);\n\n                if (_matchedIndexes) {\n                  dirtyFieldsRef.current.add(_value.replace(/[\\d+]([^[\\d+]+)$/, \"\".concat(isPrePend ? +_matchedIndexes[_matchedIndexes.length - 1] + values.length : updateIndex, \"$1\")));\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n        });\n      }\n\n      if (!isRemove) {\n        values.forEach(function (fieldValue, index) {\n          return Object.keys(fieldValue).forEach(function (key) {\n            return dirtyFieldsRef.current.add(\"\".concat(name, \"[\").concat(isPrePend ? index : allFields.current.length + index, \"].\").concat(key));\n          });\n        });\n        isDirtyRef.current = true;\n      }\n\n      render = true;\n    }\n\n    if (render && !isWatchAllRef.current) {\n      reRender();\n    }\n  };\n\n  var resetFields = function resetFields(flagOrFields) {\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = isUndefined(flagOrFields) ? true : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\n    }\n\n    for (var key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key], true);\n      }\n    }\n  };\n\n  var mapCurrentFieldsValueWithState = function mapCurrentFieldsValueWithState() {\n    var currentFieldsValue = get(getValues({\n      nest: true\n    }), name);\n\n    if (isArray(currentFieldsValue)) {\n      for (var i = 0; i < currentFieldsValue.length; i++) {\n        allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\n      }\n    }\n  };\n\n  var append = function append(value) {\n    setFieldAndValidState([].concat(_toConsumableArray(allFields.current), _toConsumableArray(isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)])));\n    modifyDirtyFields({\n      value: value\n    });\n  };\n\n  var prepend$1 = function prepend$1(value) {\n    var shouldRender = false;\n    resetFields();\n    setFieldAndValidState(prepend(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = prepend(errorsRef.current[name], fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], fillEmptyArray(value));\n      shouldRender = true;\n    }\n\n    modifyDirtyFields({\n      shouldRender: shouldRender,\n      isPrePend: true,\n      value: value\n    });\n  };\n\n  var remove = function remove(index) {\n    var shouldRender = false;\n    var isIndexUndefined = isUndefined(index);\n\n    if (!isIndexUndefined) {\n      mapCurrentFieldsValueWithState();\n    }\n\n    resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\n    setFieldAndValidState(removeArrayAt(allFields.current, index));\n    setIsDeleted(true);\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\n\n      if (!errorsRef.current[name].filter(Boolean).length) {\n        delete errorsRef.current[name];\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      var fieldIndex = -1;\n      var isFound = false;\n\n      var _isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        var isLast = fieldIndex === fields.length - 1;\n        var isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || _isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (var key in fields[fieldIndex]) {\n          var currentFieldName = \"\".concat(name, \"[\").concat(fieldIndex, \"].\").concat(key);\n\n          if (isCurrentIndex || isLast || _isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            var previousFieldName = \"\".concat(name, \"[\").concat(fieldIndex - 1, \"].\").concat(key);\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    modifyDirtyFields({\n      shouldRender: shouldRender,\n      isRemove: true,\n      index: index\n    });\n  };\n\n  var insert$1 = function insert$1(index, value) {\n    mapCurrentFieldsValueWithState();\n    resetFields(insert(getFieldValueByName(fieldsRef.current, name), index));\n    setFieldAndValidState(insert(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = insert(errorsRef.current[name], index, fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, fillEmptyArray(value));\n      reRender();\n    }\n  };\n\n  var swap = function swap(indexA, indexB) {\n    mapCurrentFieldsValueWithState();\n    var fieldValues = getFieldValueByName(fieldsRef.current, name);\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    swapArrayAt(allFields.current, indexA, indexB);\n    setFieldAndValidState(_toConsumableArray(allFields.current));\n\n    if (errorsRef.current[name]) {\n      swapArrayAt(errorsRef.current[name], indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      reRender();\n    }\n  };\n\n  var move = function move(from, to) {\n    mapCurrentFieldsValueWithState();\n    var fieldValues = getFieldValueByName(fieldsRef.current, name);\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    moveArrayAt(allFields.current, from, to);\n    setFieldAndValidState(_toConsumableArray(allFields.current));\n\n    if (errorsRef.current[name]) {\n      moveArrayAt(errorsRef.current[name], from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      reRender();\n    }\n  };\n\n  var reset = function reset() {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  useEffect(function () {\n    if (isNameKey && isDeleted && fieldArrayDefaultValues.current[name] && fields.length < fieldArrayDefaultValues.current[name].length) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n  }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\n  useEffect(function () {\n    if (isWatchAllRef && isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      var _iterator5 = _createForOfIteratorHelper(watchFieldsRef.current),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var watchField = _step5.value;\n\n          if (watchField.startsWith(name)) {\n            reRender();\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, [fields, name, reRender, watchFieldsRef, isWatchAllRef]);\n  useEffect(function () {\n    var resetFunctions = resetFieldArrayFunctionRef.current;\n    var fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n    return function () {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    swap: useCallback(swap, [name]),\n    move: useCallback(move, [name]),\n    prepend: useCallback(prepend$1, [name]),\n    append: useCallback(append, [name]),\n    remove: useCallback(remove, [fields, name]),\n    insert: useCallback(insert$1, [name]),\n    fields: fields\n  };\n};\n\nvar getInputValue = function getInputValue(event, isCheckboxInput) {\n  return isPrimitive(event) || !isObject(event.target) || isObject(event.target) && !event.type ? event : isCheckboxInput || isUndefined(event.target.value) ? event.target.checked : event.target.value;\n};\n\nvar Controller = function Controller(_a) {\n  var name = _a.name,\n      rules = _a.rules,\n      InnerComponent = _a.as,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      _a$onChangeName = _a.onChangeName,\n      onChangeName = _a$onChangeName === void 0 ? VALIDATION_MODE.onChange : _a$onChangeName,\n      _a$onBlurName = _a.onBlurName,\n      onBlurName = _a$onBlurName === void 0 ? VALIDATION_MODE.onBlur : _a$onBlurName,\n      valueName = _a.valueName,\n      defaultValue = _a.defaultValue,\n      control = _a.control,\n      onFocus = _a.onFocus,\n      rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\n\n  var methods = useFormContext();\n\n  var _ref45 = control || methods.control,\n      defaultValuesRef = _ref45.defaultValuesRef,\n      setValue = _ref45.setValue,\n      register = _ref45.register,\n      unregister = _ref45.unregister,\n      errorsRef = _ref45.errorsRef,\n      removeFieldEventListener = _ref45.removeFieldEventListener,\n      triggerValidation = _ref45.triggerValidation,\n      _ref45$mode = _ref45.mode,\n      isOnSubmit = _ref45$mode.isOnSubmit,\n      isOnBlur = _ref45$mode.isOnBlur,\n      isOnChange = _ref45$mode.isOnChange,\n      _ref45$reValidateMode = _ref45.reValidateMode,\n      isReValidateOnBlur = _ref45$reValidateMode.isReValidateOnBlur,\n      isReValidateOnSubmit = _ref45$reValidateMode.isReValidateOnSubmit,\n      isSubmitted = _ref45.formState.isSubmitted,\n      fieldsRef = _ref45.fieldsRef,\n      fieldArrayNamesRef = _ref45.fieldArrayNamesRef;\n\n  var _useState7 = useState(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue),\n      _useState8 = _slicedToArray(_useState7, 2),\n      value = _useState8[0],\n      setInputStateValue = _useState8[1];\n\n  var valueRef = useRef(value);\n  var isCheckboxInput = isBoolean(value);\n  var shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\n  var rulesRef = useRef(rules);\n  rulesRef.current = rules;\n\n  var shouldValidate = function shouldValidate() {\n    return !skipValidation({\n      hasError: !!get(errorsRef.current, name),\n      isOnBlur: isOnBlur,\n      isOnSubmit: isOnSubmit,\n      isOnChange: isOnChange,\n      isReValidateOnBlur: isReValidateOnBlur,\n      isReValidateOnSubmit: isReValidateOnSubmit,\n      isSubmitted: isSubmitted\n    });\n  };\n\n  var commonTask = function commonTask(event) {\n    var data = getInputValue(event, isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  var eventWrapper = function eventWrapper(event) {\n    return function () {\n      for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {\n        arg[_key] = arguments[_key];\n      }\n\n      return setValue(name, commonTask(event(arg)), shouldValidate());\n    };\n  };\n\n  var handleChange = function handleChange(event) {\n    var data = commonTask(event);\n    setValue(name, data, shouldValidate());\n  };\n\n  var registerField = useCallback(function () {\n    if (isNameInFieldArray(fieldArrayNamesRef.current, name) && fieldsRef.current[name]) {\n      removeFieldEventListener(fieldsRef.current[name], true);\n    }\n\n    register(Object.defineProperty({\n      name: name,\n      focus: onFocus\n    }, VALUE, {\n      set: function set(data) {\n        setInputStateValue(data);\n        valueRef.current = data;\n      },\n      get: function get() {\n        return valueRef.current;\n      }\n    }), rulesRef.current);\n  }, [fieldArrayNamesRef, fieldsRef, rulesRef, name, onFocus, register, removeFieldEventListener]);\n  useEffect(function () {\n    var fieldArrayNames = fieldArrayNamesRef.current;\n    registerField();\n    return function () {\n      if (!isNameInFieldArray(fieldArrayNames, name)) {\n        unregister(name);\n      }\n    };\n  }, [name, unregister, fieldArrayNamesRef, registerField]);\n  useEffect(function () {\n    registerField();\n  }, [registerField]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      setInputStateValue(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue);\n    }\n  });\n  var props = Object.assign(Object.assign(Object.assign(Object.assign({\n    name: name\n  }, rest), onChange ? _defineProperty({}, onChangeName, eventWrapper(onChange)) : _defineProperty({}, onChangeName, handleChange)), onBlur || shouldReValidateOnBlur ? _defineProperty({}, onBlurName, function () {\n    if (onBlur) {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      onBlur(args);\n    }\n\n    if (shouldReValidateOnBlur) {\n      triggerValidation(name);\n    }\n  }) : {}), _defineProperty({}, valueName || (isCheckboxInput ? 'checked' : VALUE), value));\n  return isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props);\n};\n\nvar ErrorMessage = function ErrorMessage(_a) {\n  var InnerComponent = _a.as,\n      errors = _a.errors,\n      name = _a.name,\n      message = _a.message,\n      children = _a.children,\n      rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\n\n  var methods = useFormContext();\n  var error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  var messageFromRegister = error.message,\n      types = error.types;\n  var props = Object.assign(Object.assign({}, InnerComponent ? rest : {}), {\n    children: children ? children({\n      message: messageFromRegister || message,\n      messages: types\n    }) : messageFromRegister || message\n  });\n  return InnerComponent ? isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props) : createElement(Fragment, Object.assign({}, props));\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };","map":{"version":3,"sources":["/home/knd/projects/website/decoco/client/node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["isValidElement","useRef","useState","useCallback","useEffect","createContext","useContext","createElement","cloneElement","Fragment","isUndefined","val","undefined","isNullOrUndefined","value","isArray","Array","isObjectType","isObject","isHTMLElement","nodeType","Node","ELEMENT_NODE","VALIDATION_MODE","onBlur","onChange","onSubmit","VALUE","UNDEFINED","EVENTS","BLUR","CHANGE","INPUT","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","REGEX_ARRAY_FIELD_INDEX","attachEventListeners","ref","field","handleChange","isRadioOrCheckbox","addEventListener","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","get","obj","defaultValue","split","filter","Boolean","focusErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","element","type","isCheckBoxInput","isDetached","HTMLElement","DOCUMENT_NODE","parentNode","isEmptyObject","keys","castPath","baseGet","updatePath","baseSlice","array","start","end","parent","baseUnset","childObject","previousObjRef","k","slice","objectRef","currentPaths","currentPathsLength","item","unset","paths","forEach","findRemovedFieldAndRemoveListener","forceDelete","name","mutationWatcher","fieldValue","disconnect","defaultReturn","isValid","getRadioValue","checked","getMultipleSelectValue","selected","map","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","attributes","getFieldValue","files","isString","getFieldsValues","search","output","startsWith","find","nest","compareObject","objectA","objectB","objectAData","objectBData","isSameError","error","types","message","shouldUpdateWithError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isValueMessage","isFunction","isBoolean","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","_a","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validationResult","validateFunction","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationResolver","context","abortEarly","isPrimitive","getPath","getInnerPath","pathWithIndex","getPath$1","parentPath","flat","Infinity","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","add","skipValidation","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldArrayParentName","substring","indexOf","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","prev","isFileListObject","FileList","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","modeChecker","mode","isRadioOrCheckboxFunction","useForm","reValidateMode","validationContext","defaultValues","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultRenderValuesRef","defaultValuesRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","validationContextRef","fieldArrayNamesRef","render","isWindowUndefined","shouldValidateCallback","isWeb","isProxyEnabled","Proxy","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","shouldRenderBaseOnError","shouldRender","skipReRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldArray","previousDirtyFieldsLength","size","isDirty","fieldArrayName","isDirtyChanged","setDirtyAndTouchedFields","setInternalValueBatch","parentFieldName","isValueArray","setInternalValue","executeValidation","executeSchemaValidation","payload","previousFormIsValid","triggerValidation","Promise","all","every","isFieldWatched","setValue","valueOrShouldValidate","shouldValidate","isMultiple","isStringFieldName","target","currentError","shouldSkipValidation","shouldUpdateDirty","shouldUpdateState","validateSchemaIsValid","then","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","preventRender","setError","watch","fieldNames","unregister","registerFieldsRef","validateOptions","console","warn","fieldAttributes","currentField","isEmptyDefaultValue","fieldToAttachListener","register","refOrValidationOptions","validationOptions","handleSubmit","callback","e","preventDefault","persist","fieldError","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","getValues","outputValues","process","env","NODE_ENV","formState","commonProps","prop","control","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","FormGlobalContext","useFormContext","FormContext","children","restMethods","Provider","generateId","d","performance","now","c","r","Math","random","appendId","keyName","mapIds","getSortRemovedItems","indexes","removeIndexes","updatedIndexes","count","notFoundIndexes","removeIndex","sort","notFoundIndex","removeAt","removeAtIndexes","removeArrayAt","moveArrayAt","from","to","splice","swapArrayAt","indexA","indexB","temp","prepend","insert","fillEmptyArray","fill","useFieldArray","methods","getDefaultValues","memoizedDefaultValues","setField","isDeleted","setIsDeleted","allFields","isNameKey","appendValueWithKey","setFieldAndValidState","fieldsValues","modifyDirtyFields","isRemove","isPrePend","dirtyFieldIndexesAndValues","dirtyField","matchedIndexes","matchIndex","updatedDirtyFieldIndexes","updateIndex","resetFields","flagOrFields","mapCurrentFieldsValueWithState","currentFieldsValue","append","prepend$1","remove","isIndexUndefined","fieldIndex","isFound","isLast","isCurrentIndex","currentFieldName","previousFieldName","insert$1","swap","move","pop","watchField","resetFunctions","fieldArrayNames","getInputValue","event","isCheckboxInput","Controller","rules","InnerComponent","as","onChangeName","onBlurName","valueName","onFocus","rest","setInputStateValue","valueRef","shouldReValidateOnBlur","rulesRef","commonTask","eventWrapper","arg","registerField","defineProperty","props","args","ErrorMessage","messageFromRegister","messages"],"mappings":"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","sourcesContent":["import { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, cloneElement, Fragment } from 'react';\n\nvar isUndefined = (val) => val === undefined;\n\nvar isNullOrUndefined = (value) => value === null || isUndefined(value);\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\r\nconst REGEX_ARRAY_FIELD_INDEX = /[\\d+]/g;\n\nfunction attachEventListeners({ field: { ref }, handleChange, isRadioOrCheckbox, }) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!isKey(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? obj[path] || defaultValue\r\n        : result;\r\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\r\n    return isArray(value) ? value : stringToPath(value);\r\n}\r\nfunction baseGet(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return index == length ? object : undefined;\r\n}\r\nfunction baseSlice(array, start, end) {\r\n    let index = -1;\r\n    let length = array.length;\r\n    if (start < 0) {\r\n        start = -start > length ? 0 : length + start;\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end += length;\r\n    }\r\n    length = start > end ? 0 : end - start;\r\n    const result = Array(length);\r\n    while (++index < length) {\r\n        result[index] = array[index + start];\r\n    }\r\n    return result;\r\n}\r\nfunction parent(object, path) {\r\n    return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n}\r\nfunction baseUnset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const childObject = parent(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    const result = !(childObject != null) || delete childObject[key];\r\n    let previousObjRef = undefined;\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef = undefined;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index) {\r\n                if ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (isArray(objectRef) &&\r\n                        !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\r\n                            .length)) {\r\n                    previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n                }\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction unset(object, paths) {\r\n    paths.forEach((path) => {\r\n        baseUnset(object, path);\r\n    });\r\n    return object;\r\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    const fieldValue = fields[name];\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options\r\n                .filter(Boolean)\r\n                .forEach(({ ref, mutationWatcher }, index) => {\r\n                if ((ref && isDetached(ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    unset(options, [`[${index}]`]);\r\n                }\r\n            });\r\n            if (options && !options.filter(Boolean).length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if (isDetached(ref) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.filter(Boolean).reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMultipleSelect = (element) => element.type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter(({ ref: { checked } }) => checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { name, value } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return getMultipleSelectValue(ref.options);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : isArray(search)\r\n                    ? search.find((data) => name.startsWith(data))\r\n                    : search && search.nest)) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => {\r\n    const objectAData = Object.entries(objectA);\r\n    const objectBData = Object.keys(objectB);\r\n    return (objectAData.length === objectBData.length &&\r\n        objectAData.reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true));\r\n};\n\nvar isSameError = (error, { type, types, message, }) => isObject(error) &&\r\n    error.type === type &&\r\n    error.message === message &&\r\n    compareObject(error.types, types);\n\nfunction shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isValueMessage = (value) => isObject(value) && !isRegex(value);\r\n    return isValueMessage(validationData)\r\n        ? validationData\r\n        : {\r\n            value: validationData,\r\n            message: '',\r\n        };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isMessage = (value) => isString(value) || (isObject(value) && isValidElement(value));\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (validateAllFieldCriteria) {\r\n        const error = errors[name];\r\n        return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n    }\r\n    return {};\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    var _a;\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value: requiredValue, message: requiredMessage } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (requiredValue) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? (_a = fields[name].options) === null || _a === void 0 ? void 0 : _a[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\r\n        const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria\r\n        ? {\r\n            [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n        }\r\n        : {\r\n            [path]: previous[path] || Object.assign({ message,\r\n                type }, (validateAllFieldCriteria\r\n                ? {\r\n                    types: { [type]: message || true },\r\n                }\r\n                : {})),\r\n        }))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\r\n    if (validationResolver) {\r\n        return validationResolver(data, context);\r\n    }\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, {\r\n                abortEarly: false,\r\n                context,\r\n            }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => getPath(parentPath, value).flat(Infinity);\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        value = fieldValues[fieldName];\r\n        watchFields.add(fieldName);\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isObject(combinedDefaultValues)\r\n            ? get(combinedDefaultValues, fieldName)\r\n            : combinedDefaultValues\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnChange, hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnChange && isBlurEvent) ||\r\n    (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (isUndefined(dataB) ||\r\n            Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName(name, current) ? true : prev), false);\n\nvar isFileListObject = (data) => typeof FileList !== UNDEFINED && data instanceof FileList;\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const fieldArrayDefaultValues = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultRenderValuesRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const validationContextRef = useRef(validationContext);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit, isOnChange } = useRef(modeChecker(mode)).current;\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const shouldValidateCallback = !!(validationSchema || validationResolver);\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    validationContextRef.current = validationContext;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldUpdateWithError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) ||\r\n                shouldValidateCallback) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !get(errorsRef.current, name);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !skipReRender) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, shouldValidateCallback]);\r\n    const setFieldValue = useCallback((field, rawValue) => {\r\n        const ref = field.ref;\r\n        const options = field.options;\r\n        const { type } = ref;\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref)) {\r\n            if (isFileListObject(value)) {\r\n                ref.files = value;\r\n            }\r\n            else {\r\n                ref.value = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n        return !!type;\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        let isDirty = defaultRenderValuesRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        if (isFieldArray) {\r\n            const fieldArrayName = getFieldArrayParentName(name);\r\n            isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isDirty;\r\n        if (isDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    };\r\n    const setDirtyAndTouchedFields = useCallback((fieldName) => {\r\n        if (setDirty(fieldName) ||\r\n            (!get(touchedFieldsRef.current, fieldName) &&\r\n                readFormStateRef.current.touched)) {\r\n            return !!set(touchedFieldsRef.current, fieldName, true);\r\n        }\r\n    }, []);\r\n    const setInternalValueBatch = useCallback((name, value, parentFieldName) => {\r\n        const isValueArray = isArray(value);\r\n        for (const key in value) {\r\n            const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\r\n            if (isObject(value[key])) {\r\n                setInternalValueBatch(name, value[key], fieldName);\r\n            }\r\n            const field = fieldsRef.current[fieldName];\r\n            if (field) {\r\n                setFieldValue(field, value[key]);\r\n                setDirtyAndTouchedFields(fieldName);\r\n            }\r\n        }\r\n    }, [setFieldValue, setDirtyAndTouchedFields]);\r\n    const setInternalValue = useCallback((name, value) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            setFieldValue(field, value);\r\n            const output = setDirtyAndTouchedFields(name);\r\n            if (isBoolean(output)) {\r\n                return output;\r\n            }\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValueBatch(name, value);\r\n        }\r\n    }, [setDirtyAndTouchedFields, setFieldValue, setInternalValueBatch]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n        shouldRenderBaseOnError(name, error, false, skipReRender);\r\n        return isEmptyObject(error);\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach((name) => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            shouldRenderBaseOnError(payload, (get(errors, payload)\r\n                ? { [payload]: get(errors, payload) }\r\n                : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (shouldValidateCallback) {\r\n            return executeSchemaValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [\r\n        executeSchemaValidation,\r\n        executeValidation,\r\n        reRender,\r\n        shouldValidateCallback,\r\n    ]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    function setValue(names, valueOrShouldValidate, shouldValidate) {\r\n        let shouldRender = false;\r\n        const isMultiple = isArray(names);\r\n        (isMultiple\r\n            ? names\r\n            : [names]).forEach((name) => {\r\n            const isStringFieldName = isString(name);\r\n            shouldRender =\r\n                setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName\r\n                    ? valueOrShouldValidate\r\n                    : Object.values(name)[0]) || isMultiple\r\n                    ? true\r\n                    : isFieldWatched(name);\r\n        });\r\n        if (shouldRender || isMultiple) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate || (isMultiple && valueOrShouldValidate)) {\r\n            triggerValidation(isMultiple ? undefined : names);\r\n        }\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isOnChange,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldUpdateState = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldUpdateState && reRender();\r\n            }\r\n            if (shouldValidateCallback) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldUpdateState = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaIsValid = useCallback((values = {}) => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [reRender, validateAllFieldCriteria, validationResolver]);\r\n    const removeFieldEventListener = useCallback((field, forceDelete) => {\r\n        if (!isUndefined(handleChangeRef.current) && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        const { name } = field.ref;\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [\r\n            name,\r\n        ]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach((data) => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n            if (shouldValidateCallback) {\r\n                validateSchemaIsValid();\r\n            }\r\n        }\r\n    }, [\r\n        reRender,\r\n        shouldValidateCallback,\r\n        validateSchemaIsValid,\r\n        removeFieldEventListener,\r\n    ]);\r\n    function clearError(name) {\r\n        if (isUndefined(name)) {\r\n            errorsRef.current = {};\r\n        }\r\n        else {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, preventRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errorsRef.current[name], {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (!preventRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach((error) => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? isUndefined(defaultValuesRef.current)\r\n                ? {}\r\n                : defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        const watchFields = watchFieldsRef.current;\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) || combinedDefaultValues;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(names) {\r\n        if (!isEmptyObject(fieldsRef.current)) {\r\n            (isArray(names) ? names : [names]).forEach((fieldName) => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldAttributes = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        let currentField = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray = false;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? currentField &&\r\n                isArray(currentField.options) &&\r\n                currentField.options\r\n                    .filter(Boolean)\r\n                    .find(({ ref }) => value === ref.value)\r\n            : currentField) {\r\n            fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\r\n            currentField = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((currentField && currentField.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });\r\n        }\r\n        else {\r\n            currentField = fieldAttributes;\r\n        }\r\n        fields[name] = currentField;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = get(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(currentField, defaultValue);\r\n            }\r\n        }\r\n        if (shouldValidateCallback &&\r\n            !isFieldArray &&\r\n            readFormStateRef.current.isValid) {\r\n            validateSchemaIsValid();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, currentField).then((error) => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    if (isEmptyObject(error)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    else {\r\n                        isValidRef.current = false;\r\n                    }\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultRenderValuesRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultRenderValuesRef.current[name] = isEmptyDefaultValue\r\n                ? getFieldValue(fields, currentField.ref)\r\n                : defaultValue;\r\n        }\r\n        if (!type) {\r\n            return;\r\n        }\r\n        const fieldToAttachListener = isRadioOrCheckbox && currentField.options\r\n            ? currentField.options[currentField.options.length - 1]\r\n            : currentField;\r\n        attachEventListeners({\r\n            field: fieldToAttachListener,\r\n            isRadioOrCheckbox,\r\n            handleChange: handleChangeRef.current,\r\n        });\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        let fieldValues = {};\r\n        const fields = fieldsRef.current;\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (shouldValidateCallback) {\r\n                fieldValues = getFieldsValues(fields);\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fields)) {\r\n                    if (field) {\r\n                        const { ref, ref: { name }, } = field;\r\n                        const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            validFieldsRef.current.delete(name);\r\n                        }\r\n                        else {\r\n                            if (fieldsWithValidationRef.current.has(name)) {\r\n                                validFieldsRef.current.add(name);\r\n                            }\r\n                            fieldValues[name] = getFieldValue(fields, ref);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                if (submitFocusError && isWeb) {\r\n                    focusErrorField(fields, fieldErrors);\r\n                }\r\n                errorsRef.current = fieldErrors;\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        isWeb,\r\n        reRender,\r\n        shouldValidateCallback,\r\n        submitFocusError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = ({ errors, dirty, isSubmitted, touched, isValid, submitCount, }) => {\r\n        fieldsRef.current = {};\r\n        if (!errors) {\r\n            errorsRef.current = {};\r\n        }\r\n        if (!touched) {\r\n            touchedFieldsRef.current = {};\r\n        }\r\n        if (!isValid) {\r\n            validFieldsRef.current = new Set();\r\n            fieldsWithValidationRef.current = new Set();\r\n            isValidRef.current = true;\r\n        }\r\n        if (!dirty) {\r\n            dirtyFieldsRef.current = new Set();\r\n            isDirtyRef.current = false;\r\n        }\r\n        if (!isSubmitted) {\r\n            isSubmittedRef.current = false;\r\n        }\r\n        if (!submitCount) {\r\n            submitCountRef.current = 0;\r\n        }\r\n        defaultRenderValuesRef.current = {};\r\n        fieldArrayDefaultValues.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const value of Object.values(fieldsRef.current)) {\r\n                if (value) {\r\n                    const { ref, options } = value;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs(omitResetState);\r\n        reRender();\r\n    };\r\n    const getValues = (payload) => {\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    };\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            process.env.NODE_ENV === 'production' &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!shouldValidateCallback) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isValidRef.current,\r\n    };\r\n    const commonProps = {\r\n        triggerValidation,\r\n        setValue: useCallback(setValue, [\r\n            reRender,\r\n            setInternalValue,\r\n            triggerValidation,\r\n        ]),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultRenderValuesRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        getValues: useCallback(getValues, []),\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n    const control = Object.assign(Object.assign(Object.assign({ removeFieldEventListener,\r\n        reRender }, (shouldValidateCallback ? { validateSchemaIsValid } : {})), { mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n            isOnChange,\r\n        }, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        }, errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        isWatchAllRef,\r\n        watchFieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        fieldArrayDefaultValues,\r\n        validFieldsRef,\r\n        dirtyFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef }), commonProps);\r\n    return Object.assign({ watch,\r\n        control,\r\n        handleSubmit, reset: useCallback(reset, []), clearError: useCallback(clearError, []), setError: useCallback(setError, []), errors: errorsRef.current }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value, keyName) => (Object.assign({ [keyName]: generateId() }, (isObject(value) ? value : { value })));\r\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nvar getSortRemovedItems = (indexes, removeIndexes, updatedIndexes = [], count = 0, notFoundIndexes = []) => {\r\n    for (const removeIndex of removeIndexes) {\r\n        if (indexes.indexOf(removeIndex) < 0) {\r\n            notFoundIndexes.push(removeIndex);\r\n        }\r\n    }\r\n    for (const index of indexes.sort()) {\r\n        if (removeIndexes.indexOf(index) > -1) {\r\n            updatedIndexes.push(-1);\r\n            count++;\r\n        }\r\n        else {\r\n            updatedIndexes.push(index -\r\n                count -\r\n                (notFoundIndexes.length\r\n                    ? notFoundIndexes\r\n                        .map((notFoundIndex) => notFoundIndex < index)\r\n                        .filter(Boolean).length\r\n                    : 0));\r\n        }\r\n    }\r\n    return updatedIndexes;\r\n};\n\nconst removeAt = (data, index) => [\r\n    ...data.slice(0, index),\r\n    ...data.slice(index + 1),\r\n];\r\nfunction removeAtIndexes(data, index) {\r\n    let k = -1;\r\n    while (++k < data.length) {\r\n        if (index.indexOf(k) >= 0) {\r\n            delete data[k];\r\n        }\r\n    }\r\n    return data.filter(Boolean);\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : isArray(index)\r\n        ? removeAtIndexes(data, index)\r\n        : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(isArray(value) ? value : [value || null]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(isArray(value) ? value : [value || null]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : null;\n\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    const { isWatchAllRef, resetFieldArrayFunctionRef, fieldArrayNamesRef, reRender, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, dirtyFieldsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldsRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValues, validateSchemaIsValid, } = control || methods.control;\r\n    const getDefaultValues = () => [\r\n        ...get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\r\n            ? fieldArrayDefaultValues.current\r\n            : defaultValuesRef.current, name, []),\r\n    ];\r\n    const memoizedDefaultValues = useRef(getDefaultValues());\r\n    const [fields, setField] = useState(mapIds(memoizedDefaultValues.current, keyName));\r\n    const [isDeleted, setIsDeleted] = useState(false);\r\n    const allFields = useRef(fields);\r\n    const isNameKey = isKey(name);\r\n    allFields.current = fields;\r\n    if (isNameKey) {\r\n        fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\r\n    }\r\n    const appendValueWithKey = (values) => values.map((value) => appendId(value, keyName));\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setField(fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateSchemaIsValid) {\r\n            validateSchemaIsValid({\r\n                [name]: fieldsValues,\r\n            });\r\n        }\r\n    };\r\n    const modifyDirtyFields = ({ shouldRender, isRemove, isPrePend, index, value = {}, } = {}) => {\r\n        let render = shouldRender;\r\n        const values = isArray(value) ? value : [value];\r\n        if (readFormStateRef.current.dirty) {\r\n            const dirtyFieldIndexesAndValues = {};\r\n            if (isPrePend || isRemove) {\r\n                for (const dirtyField of [...dirtyFieldsRef.current].sort()) {\r\n                    if (isMatchFieldArrayName(dirtyField, name)) {\r\n                        const matchedIndexes = dirtyField.match(REGEX_ARRAY_FIELD_INDEX);\r\n                        if (matchedIndexes) {\r\n                            const matchIndex = +matchedIndexes[matchedIndexes.length - 1];\r\n                            if (dirtyFieldIndexesAndValues[matchIndex]) {\r\n                                dirtyFieldIndexesAndValues[matchIndex].push(dirtyField);\r\n                            }\r\n                            else {\r\n                                dirtyFieldIndexesAndValues[matchIndex] = [dirtyField];\r\n                            }\r\n                        }\r\n                        dirtyFieldsRef.current.delete(dirtyField);\r\n                    }\r\n                }\r\n            }\r\n            if (!isUndefined(index) || isPrePend) {\r\n                const updatedDirtyFieldIndexes = isUndefined(index)\r\n                    ? []\r\n                    : getSortRemovedItems(Object.keys(dirtyFieldIndexesAndValues).map((i) => +i), isArray(index) ? index : [index]);\r\n                Object.values(dirtyFieldIndexesAndValues).forEach((values, index) => {\r\n                    const updateIndex = isPrePend ? 0 : updatedDirtyFieldIndexes[index];\r\n                    if (updateIndex > -1) {\r\n                        for (const value of values) {\r\n                            const matchedIndexes = value.match(REGEX_ARRAY_FIELD_INDEX);\r\n                            if (matchedIndexes) {\r\n                                dirtyFieldsRef.current.add(value.replace(/[\\d+]([^[\\d+]+)$/, `${isPrePend\r\n                                    ? +matchedIndexes[matchedIndexes.length - 1] +\r\n                                        values.length\r\n                                    : updateIndex}$1`));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (!isRemove) {\r\n                values.forEach((fieldValue, index) => Object.keys(fieldValue).forEach((key) => dirtyFieldsRef.current.add(`${name}[${isPrePend ? index : allFields.current.length + index}].${key}`)));\r\n                isDirtyRef.current = true;\r\n            }\r\n            render = true;\r\n        }\r\n        if (render && !isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n    };\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = get(getValues({ nest: true }), name);\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        setFieldAndValidState([\r\n            ...allFields.current,\r\n            ...(isArray(value)\r\n                ? appendValueWithKey(value)\r\n                : [appendId(value, keyName)]),\r\n        ]);\r\n        modifyDirtyFields({ value });\r\n    };\r\n    const prepend$1 = (value) => {\r\n        let shouldRender = false;\r\n        resetFields();\r\n        setFieldAndValidState(prepend(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prepend(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n            shouldRender = true;\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isPrePend: true,\r\n            value,\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        let shouldRender = false;\r\n        const isIndexUndefined = isUndefined(index);\r\n        if (!isIndexUndefined) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(removeArrayAt(allFields.current, index));\r\n        setIsDeleted(true);\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n            if (!errorsRef.current[name].filter(Boolean).length) {\r\n                delete errorsRef.current[name];\r\n            }\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n            shouldRender = true;\r\n        }\r\n        if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\r\n            let fieldIndex = -1;\r\n            let isFound = false;\r\n            const isIndexUndefined = isUndefined(index);\r\n            while (fieldIndex++ < fields.length) {\r\n                const isLast = fieldIndex === fields.length - 1;\r\n                const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\r\n                if (isCurrentIndex || isIndexUndefined) {\r\n                    isFound = true;\r\n                }\r\n                if (!isFound) {\r\n                    continue;\r\n                }\r\n                for (const key in fields[fieldIndex]) {\r\n                    const currentFieldName = `${name}[${fieldIndex}].${key}`;\r\n                    if (isCurrentIndex || isLast || isIndexUndefined) {\r\n                        validFieldsRef.current.delete(currentFieldName);\r\n                        fieldsWithValidationRef.current.delete(currentFieldName);\r\n                    }\r\n                    else {\r\n                        const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\r\n                        if (validFieldsRef.current.has(currentFieldName)) {\r\n                            validFieldsRef.current.add(previousFieldName);\r\n                        }\r\n                        if (fieldsWithValidationRef.current.has(currentFieldName)) {\r\n                            fieldsWithValidationRef.current.add(previousFieldName);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isRemove: true,\r\n            index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insert(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(insert(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insert(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n            reRender();\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(allFields.current, indexA, indexB);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n            reRender();\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(allFields.current, from, to);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n            reRender();\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = getDefaultValues();\r\n        setField(mapIds(memoizedDefaultValues.current, keyName));\r\n    };\r\n    useEffect(() => {\r\n        if (isNameKey &&\r\n            isDeleted &&\r\n            fieldArrayDefaultValues.current[name] &&\r\n            fields.length < fieldArrayDefaultValues.current[name].length) {\r\n            fieldArrayDefaultValues.current[name].pop();\r\n        }\r\n    }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\r\n    useEffect(() => {\r\n        if (isWatchAllRef && isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n        else if (watchFieldsRef) {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    reRender();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }, [fields, name, reRender, watchFieldsRef, isWatchAllRef]);\r\n    useEffect(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return {\r\n        swap: useCallback(swap, [name]),\r\n        move: useCallback(move, [name]),\r\n        prepend: useCallback(prepend$1, [name]),\r\n        append: useCallback(append, [name]),\r\n        remove: useCallback(remove, [fields, name]),\r\n        insert: useCallback(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isCheckboxInput || isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control, onFocus } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur, isOnChange }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const rulesRef = useRef(rules);\r\n    rulesRef.current = rules;\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isOnChange,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (event) => {\r\n        const data = getInputValue(event, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (event) => {\r\n        const data = commonTask(event);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = useCallback(() => {\r\n        if (isNameInFieldArray(fieldArrayNamesRef.current, name) &&\r\n            fieldsRef.current[name]) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({ name, focus: onFocus }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), rulesRef.current);\r\n    }, [\r\n        fieldArrayNamesRef,\r\n        fieldsRef,\r\n        rulesRef,\r\n        name,\r\n        onFocus,\r\n        register,\r\n        removeFieldEventListener,\r\n    ]);\r\n    useEffect(() => {\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        registerField();\r\n        return () => {\r\n            if (!isNameInFieldArray(fieldArrayNames, name)) {\r\n                unregister(name);\r\n            }\r\n        };\r\n    }, [name, unregister, fieldArrayNamesRef, registerField]);\r\n    useEffect(() => {\r\n        registerField();\r\n    }, [registerField]);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    useEffect(() => {\r\n        if (!fieldsRef.current[name]) {\r\n            registerField();\r\n            setInputStateValue(isUndefined(defaultValue)\r\n                ? get(defaultValuesRef.current, name)\r\n                : defaultValue);\r\n        }\r\n    });\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), (onBlur || shouldReValidateOnBlur\r\n        ? {\r\n            [onBlurName]: (...args) => {\r\n                if (onBlur) {\r\n                    onBlur(args);\r\n                }\r\n                if (shouldReValidateOnBlur) {\r\n                    triggerValidation(name);\r\n                }\r\n            },\r\n        }\r\n        : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent)\r\n        ? cloneElement(InnerComponent, props)\r\n        : createElement(InnerComponent, props);\r\n};\n\nconst ErrorMessage = (_a) => {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"]},"metadata":{},"sourceType":"module"}